# Pair Programming Guidance Mechanism for Copilot and Gemini Code Assist

"""
Este script fornece orienta√ß√µes e pr√°ticas recomendadas para pair programming utilizando ferramentas como GitHub Copilot e Gemini Code Assist no contexto do projeto CrewAI.

Objetivo:
- Maximizar a colabora√ß√£o entre programadores.
- Garantir que as sugest√µes de IA sejam relevantes e alinhadas com os objetivos do projeto.
- Facilitar a integra√ß√£o de novas ideias e pr√°ticas no fluxo de trabalho.
"""

import os
from pathlib import Path

# Caminhos importantes no projeto
PROJECT_ROOT = Path(__file__).parent.parent
AGENTS_FILE = PROJECT_ROOT / "src/config/agents.yaml"
TASKS_FILE = PROJECT_ROOT / "src/config/tasks.yaml"
TOOLS_DIR = PROJECT_ROOT / "src/tools"

# Fun√ß√£o para exibir orienta√ß√µes gerais
def display_general_guidelines():
    print("""
    üßë‚Äçüíª Orienta√ß√µes Gerais para Pair Programming com Copilot/Gemini:

    1. **Comunique-se constantemente:**
       - Explique suas inten√ß√µes antes de escrever c√≥digo.
       - Discuta as sugest√µes fornecidas pela IA com seu parceiro.

    2. **Use coment√°rios claros:**
       - Adicione coment√°rios para guiar a IA e seu parceiro.
       - Exemplo: # Criar um agente para an√°lise de dados financeiros.

    3. **Valide as sugest√µes da IA:**
       - Sempre revise o c√≥digo sugerido antes de aceit√°-lo.
       - Teste as implementa√ß√µes para garantir que atendem aos requisitos.

    4. **Divida tarefas:**
       - Um programador pode focar na l√≥gica principal enquanto o outro ajusta detalhes ou escreve testes.

    5. **Documente mudan√ßas:**
       - Atualize os arquivos de documenta√ß√£o e YAML conforme necess√°rio.
    """)

# Fun√ß√£o para verificar consist√™ncia nos arquivos YAML
def validate_yaml_files():
    print("\nüîç Validando arquivos YAML...")
    for file in [AGENTS_FILE, TASKS_FILE]:
        if not file.exists():
            print(f"‚ö†Ô∏è Arquivo n√£o encontrado: {file}")
        else:
            print(f"‚úÖ Arquivo encontrado: {file}")

# Fun√ß√£o para sugerir melhorias no fluxo de trabalho
def suggest_workflow_improvements():
    print("""
    üöÄ Sugest√µes para Melhorar o Fluxo de Trabalho:

    - **Integra√ß√£o de Ferramentas:**
      Use ferramentas personalizadas no diret√≥rio `src/tools` para automatizar tarefas repetitivas.

    - **Testes Automatizados:**
      Crie testes no diret√≥rio `tests/` para validar as implementa√ß√µes.

    - **Feedback Cont√≠nuo:**
      Utilize revis√µes de c√≥digo para identificar melhorias e garantir qualidade.

    - **Orquestra√ß√£o de Tarefas:**
      Configure corretamente os arquivos `agents.yaml` e `tasks.yaml` para refletir as mudan√ßas no projeto.
    """)

# Fun√ß√£o principal
def main():
    print("\n=== Pair Programming Guidance ===")
    display_general_guidelines()
    validate_yaml_files()
    suggest_workflow_improvements()

if __name__ == "__main__":
    main()